// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perm.proto

#ifndef PROTOBUF_perm_2eproto__INCLUDED
#define PROTOBUF_perm_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace Perm {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_perm_2eproto();
void protobuf_AssignDesc_perm_2eproto();
void protobuf_ShutdownFile_perm_2eproto();

class BucketPerm;

enum Limit {
  PUBLIC_PER = 0,
  PRIVATE_PER = 1
};
bool Limit_IsValid(int value);
const Limit Limit_MIN = PUBLIC_PER;
const Limit Limit_MAX = PRIVATE_PER;
const int Limit_ARRAYSIZE = Limit_MAX + 1;

const ::google::protobuf::EnumDescriptor* Limit_descriptor();
inline const ::std::string& Limit_Name(Limit value) {
  return ::google::protobuf::internal::NameOfEnum(
    Limit_descriptor(), value);
}
inline bool Limit_Parse(
    const ::std::string& name, Limit* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Limit>(
    Limit_descriptor(), name, value);
}
enum Status {
  CLOSE = 0,
  OPEN = 1
};
bool Status_IsValid(int value);
const Status Status_MIN = CLOSE;
const Status Status_MAX = OPEN;
const int Status_ARRAYSIZE = Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* Status_descriptor();
inline const ::std::string& Status_Name(Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    Status_descriptor(), value);
}
inline bool Status_Parse(
    const ::std::string& name, Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Status>(
    Status_descriptor(), name, value);
}
// ===================================================================

class BucketPerm : public ::google::protobuf::Message {
 public:
  BucketPerm();
  virtual ~BucketPerm();
  
  BucketPerm(const BucketPerm& from);
  
  inline BucketPerm& operator=(const BucketPerm& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BucketPerm& default_instance();
  
  void Swap(BucketPerm* other);
  
  // implements Message ----------------------------------------------
  
  BucketPerm* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BucketPerm& from);
  void MergeFrom(const BucketPerm& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .Perm.Limit limit = 1;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 1;
  inline Perm::Limit limit() const;
  inline void set_limit(Perm::Limit value);
  
  // optional string bucketid = 2;
  inline bool has_bucketid() const;
  inline void clear_bucketid();
  static const int kBucketidFieldNumber = 2;
  inline const ::std::string& bucketid() const;
  inline void set_bucketid(const ::std::string& value);
  inline void set_bucketid(const char* value);
  inline void set_bucketid(const char* value, size_t size);
  inline ::std::string* mutable_bucketid();
  inline ::std::string* release_bucketid();
  
  // @@protoc_insertion_point(class_scope:Perm.BucketPerm)
 private:
  inline void set_has_limit();
  inline void clear_has_limit();
  inline void set_has_bucketid();
  inline void clear_has_bucketid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* bucketid_;
  int limit_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_perm_2eproto();
  friend void protobuf_AssignDesc_perm_2eproto();
  friend void protobuf_ShutdownFile_perm_2eproto();
  
  void InitAsDefaultInstance();
  static BucketPerm* default_instance_;
};
// ===================================================================


// ===================================================================

// BucketPerm

// optional .Perm.Limit limit = 1;
inline bool BucketPerm::has_limit() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BucketPerm::set_has_limit() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BucketPerm::clear_has_limit() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BucketPerm::clear_limit() {
  limit_ = 0;
  clear_has_limit();
}
inline Perm::Limit BucketPerm::limit() const {
  return static_cast< Perm::Limit >(limit_);
}
inline void BucketPerm::set_limit(Perm::Limit value) {
  GOOGLE_DCHECK(Perm::Limit_IsValid(value));
  set_has_limit();
  limit_ = value;
}

// optional string bucketid = 2;
inline bool BucketPerm::has_bucketid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BucketPerm::set_has_bucketid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BucketPerm::clear_has_bucketid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BucketPerm::clear_bucketid() {
  if (bucketid_ != &::google::protobuf::internal::kEmptyString) {
    bucketid_->clear();
  }
  clear_has_bucketid();
}
inline const ::std::string& BucketPerm::bucketid() const {
  return *bucketid_;
}
inline void BucketPerm::set_bucketid(const ::std::string& value) {
  set_has_bucketid();
  if (bucketid_ == &::google::protobuf::internal::kEmptyString) {
    bucketid_ = new ::std::string;
  }
  bucketid_->assign(value);
}
inline void BucketPerm::set_bucketid(const char* value) {
  set_has_bucketid();
  if (bucketid_ == &::google::protobuf::internal::kEmptyString) {
    bucketid_ = new ::std::string;
  }
  bucketid_->assign(value);
}
inline void BucketPerm::set_bucketid(const char* value, size_t size) {
  set_has_bucketid();
  if (bucketid_ == &::google::protobuf::internal::kEmptyString) {
    bucketid_ = new ::std::string;
  }
  bucketid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BucketPerm::mutable_bucketid() {
  set_has_bucketid();
  if (bucketid_ == &::google::protobuf::internal::kEmptyString) {
    bucketid_ = new ::std::string;
  }
  return bucketid_;
}
inline ::std::string* BucketPerm::release_bucketid() {
  clear_has_bucketid();
  if (bucketid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bucketid_;
    bucketid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Perm

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< Perm::Limit>() {
  return Perm::Limit_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< Perm::Status>() {
  return Perm::Status_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_perm_2eproto__INCLUDED
